{"title":"Clay","subtitle":"Portal Migration","index":{"title":"Keep Calm and Migrate!","description":"Learn how to migrate Portal to new Clay components.","content":" Brought to you by Liferay, Inc. Powered by WeDeploy™ new WOW().init(); ","srcFilePath":"src/pages/index.soy","id":"pages","url":"/./","children":{"others":{"children":{"aui$":{"title":"AUI.$","description":"","layout":"othersGuide","weight":1,"clayTaglib":"document.querySelector","content":" Problems and notes: AUI.$ returns a jQuery nodeList with many methods available. Replacing it with document.querySelector or document.querySelectorAll we lose all that methods. How to migrate: Replace AUI.$(selector) with document.querySelector(selector) if expected result is one node. Replace AUI.$(selector) with document.querySelectorAll(selector) if expected result is more than one node. In this case you will have to iterate over the array to execute methods on each node if needed. Migrate methods: Note: Some methods can't be directly replaced with native implementations so we may need to use some utilities from metal like metal-dom. To do it we need to import the module in the jsp in the following way: let dom = metalDomSrcDom.default; ... or let domData = metalDomSrcDomData.default; ... Replace .addClass() with dom.addClasses(element, classes). Replace .ajaxSubmit() with fetch(url, { body: new FormData(form), credentials: 'include', method: 'POST', ... }) .then(response = ...); Replace .append() with dom.append(parent, child). Replace .attr(attribute) with .getAttribute(attribute). Replace .attr(attribute, value) with .setAttribute(attribute, value). Replace .closest() TODO. Replace .collapse() TODO. Replace .data() with domData.get(element, 'propertyName'). Replace .data(value) with domData.set(element, 'propertyName', value). Replace .each() with .forEach. Replace .find() with .querySelector() or querySelectorAll(). Replace .formToArray() TODO Replace .html() with .innerHTML. Replace .html(value) with .innerHTML = value. Replace .load() with fetch(url, data) .then(response = { element.innerHTML = response; }); Replace .map() with [...document.querySelectorAll(selector)].map() Replace .on() with addEventListener(). Replace .one() with dom.once(element, eventName, fn). Replace .prepend() TODO. Replace .prop('property') with element.property. Replace .prop('property', value) with element.property = value. Replace .ready(fn) with document.addEventListener('DOMContentLoaded', fn, false) or window.addEventListener('load', fn, false) Replace .remove() with dom.exitDocument(element). Replace .serializeArray() with form dom.exitDocument(element) Replace .sideNavigation() TODO. Replace .toggle() with if (element.style.display === 'none') element.style.display = 'block'; else element.style.display = 'none'; Replace toggleClass('class') with dom.toggleClasses(element, 'class'). Replace .tooltip() TODO. Replace .val() with .value. Replace .val(newValue) with .value = newValue. ","srcFilePath":"src/pages/others/aui$.md","id":"aui$","url":"/others/aui$.html"},"lodash":{"title":"Lodash","description":"","layout":"othersGuide","weight":1,"clayTaglib":"","content":" Problems and notes: How to migrate: _.bind to native .bind. _.bindKey there's no direct replacement. _.debounce to metal-debounce. let debounce = metalDebounceSrcDebounce.default; debounce(fn, time); _.escape there's no direct replacement. _.forEach to .forEach or for in [1,2,3].forEach((item) = { console.log(item); }); let obj = {a:1, b:2, c:3}; for(key in obj) { console.log(item); } _.groupBy there's no direct replacement. _.isEqual there's no direct replacement. _.isFunction to function isFunction(fn) { return (!!fn && (\"object\" == typeof fn || \"function\" == typeof fn)) && toString.call(fn) == '[object Function]' } _.map to native Array.map. _.reduce to native Array.reduce. _.unescape there's no direct replacement. _.sub there's no direct replacement. _.without there's no direct replacement. ","srcFilePath":"src/pages/others/lodash.md","id":"lodash","url":"/others/lodash.html"}},"title":"Others","description":"Everything you need to know to migrate old tabligs to Clay taglibs.","layout":"type","icon":"code","weight":1,"content":"","srcFilePath":"src/pages/others/index.md","id":"others","url":"/others/","childIds":["aui$","lodash"]},"styles":{"title":"Styles","description":"Everything you need to know to migrate styles from Lexicon 1.1 to Clay and Bootstrap 4.","layout":"type","icon":"magic","weight":1,"content":"","srcFilePath":"src/pages/styles/index.md","id":"styles","url":"/styles/","children":{"style1":{"title":"Style Title","description":"Lorem ipsum","layout":"guide","weight":1,"content":" ","srcFilePath":"src/pages/styles/style1.md","id":"style1","url":"/styles/style1.html"}},"childIds":["style1"]},"taglibs":{"title":"Taglibs","description":"Everything you need to know to migrate old tabligs to Clay taglibs.","layout":"type","icon":"code","weight":1,"content":"","srcFilePath":"src/pages/taglibs/index.md","id":"taglibs","url":"/taglibs/","children":{"liferay-aui:icon":{"title":"liferay-aui:icon","description":"","layout":"taglibGuide","weight":1,"clayTaglib":"clay:icon","content":" INCOMPLETE: WAITING FOR FINAL ICONS DEFINITION Problems and notes: If url is passed the icon svg is wrapped inside a link (ATag). If url is not passed the icon svg is wrapped inside a span. Current taglib accepts param “data” that is only being used in product-navigation-control-menu-web/.../view_category.jsp and ClayIcon doesn’t accept this param. Current taglib accepts param “label”. ClayIcon doesn’t accept this param. Current taglib accepts params “target” and “url” to wrap icon inside a link with this attributes. ClayIcon doesn’t accept that. Current taglib accepts param “src” that now is called “spritemap”. If no spritemap is defined it will be setted automatically to themeDisplay.getPathThemeImages().concat(\"/clay/icons.svg\") Proposed solutions: Add “wrapped” boolean param to ClayIcon to wrap the icon inside a span. For the “data” param see if it can be used in a different way in that jsp For the label param: ClayIcon is to render an icon. If we want to print a label I’d print it apart. Target and Url params: Use clay:link. How to migrate: If is used as a link (passing url / target) use clay:link instead. Change cssClass param to elementClasses. Change image param to symbol. Change src param to spritemap. Remove “icon-monospaced” from classes and add the param monospaced equals to true. Examples: From: my-icon To: My Label My Label ","srcFilePath":"src/pages/taglibs/liferay-aui:icon.md","id":"liferay-aui:icon","url":"/taglibs/liferay-aui:icon.html"},"liferay-ui:alert":{"title":"liferay-ui:alert","description":"","layout":"taglibGuide","weight":1,"clayTaglib":"clay:alert","content":" Problems and notes: animationTime param is no longer available. cssClass param is not supported (neither elementClasses is implemented), but nobody is using it. icon param is no longer supported. Alert icons are predefined depending on the alert style (i.e. danger style - exclamation-full icon) targetNode was used to render component into a specific container. We need to make sure that this is really a need and, if so, make a different component with this behaviour. For now, this feature is not available. timeout param is no longer supported. Now the component has predefined an autoclosing time and to make an alert autocloseable we need to pass it the param autoClose=true. type param is now used to specify the type of the alert (regular, fluid or notification) and new param style take its place to define if is a danger, info, success or warning alert. How to migrate: Remove animationTime param. Remove icon param and make sure to pass the style of the alert (danger, info, success or warning). Make sure if targetNode is really needed and what we have to do can't be done in another way. If not... ask. Remove timeout param. If you want your alert to be closed automatically pass autoClose=true param. Use type param to specify wich kind of alert you need (regular, fluid or notification). Examples: From: Error Error My message To: Error My message ","srcFilePath":"src/pages/taglibs/liferay-ui:alert.md","id":"liferay-ui:alert","url":"/taglibs/liferay-ui:alert.html"},"liferay-ui:error":{"title":"liferay-ui:error","description":"","layout":"taglibGuide","weight":1,"clayTaglib":"clay:error","content":" WORK IN PROGRESS This will be similar to liferay-ui:alert but with key param. Param focusField is not being used. ","srcFilePath":"src/pages/taglibs/liferay-ui:error.md","id":"liferay-ui:error","url":"/taglibs/liferay-ui:error.html"},"liferay-ui:success":{"title":"liferay-ui:success","description":"","layout":"taglibGuide","weight":1,"clayTaglib":"clay:success","content":" WORK IN PROGRESS This will be similar to liferay-ui:alert but with key param. ","srcFilePath":"src/pages/taglibs/liferay-ui:success.md","id":"liferay-ui:success","url":"/taglibs/liferay-ui:success.html"}},"childIds":["liferay-aui:icon","liferay-ui:alert","liferay-ui:error","liferay-ui:success"]}},"childIds":["others","styles","taglibs"]}}