{"title":"Portal Migration","subtitle":"Learn how to migrate Portal to new Clay components, Bootstrap 4 and much more","index":{"title":"Home","description":"Learn how to migrate Portal to new Clay components.","content":" Brought to you by Liferay, Inc. Powered by WeDeployâ„¢ new WOW().init(); ","srcFilePath":"src/pages/index.soy","id":"pages","url":"/./","children":{"javascript":{"title":"JavaScript","description":"Everything you need to know to migrate old tabligs to Clay taglibs.","layout":"type","icon":"code","weight":1,"content":"","srcFilePath":"src/pages/javascript/index.md","id":"javascript","url":"/javascript/","children":{"jQuery":{"title":"jQuery","description":"","layout":"othersGuide","weight":1,"clayTaglib":"Vanilla or Metal.js","content":" AUI.$ returns a jQuery nodeList with many methods available. Replacing it with document.querySelector or document.querySelectorAll we lose all that methods. How to migrate: Replace AUI.$(selector) with document.querySelector(selector) if expected result is one node. Replace AUI.$(selector) with document.querySelectorAll(selector) if expected result is more than one node. In this case you will have to iterate over the array to execute methods on each node if needed. Migrate methods: Some methods can't be directly replaced with native implementations so we may need to use some utilities from metal like metal-dom. To do it we need to import the module in the jsp in the following way let dom = metalDomSrcDom.default; ... let domData = metalDomSrcDomData.default; ... ### Direct replacements jQuery | replacement --- | --- .addClass() | dom.addClasses(element, classes) .append() | dom.append(parent, child) .attr(attribute) | .getAttribute(attribute) .attr(attribute, value) | .setAttribute(attribute, value) .closest() | TODO .collapse() | TODO .data() | domData.get(element, 'propertyName') .data(value) | domData.set(element, 'propertyName', value) .each() | .forEach .find() | .querySelector() or querySelectorAll() .formToArray() | TODO .html() | .innerHTML .html(value) | .innerHTML = value .map() | [...document.querySelectorAll(selector)].map() .on() | addEventListener() .one() | dom.once(element, eventName, fn) .prepend() | TODO .prop('property') | element.property .prop('property', value) | element.property = value .ready(fn) | document.addEventListener('DOMContentLoaded', fn, false) window.addEventListener('load', fn,false) .remove() | dom.exitDocument(element) toggleClass('class') | dom.toggleClasses(element, 'class') .tooltip() | TODO .val() | .value .val(newValue) | .value = newValue ### Code replacements Replace .ajaxSubmit() with fetch(url, { body: new FormData(form), credentials: 'include', method: 'POST', ... }) .then(response = ...); Replace .load() with fetch(url, data) .then(response = { element.innerHTML = response; }); Replace .serializeArray() with form dom.exitDocument(element) Replace .sideNavigation() TODO. Replace .toggle() with if (element.style.display === 'none') element.style.display = 'block'; else element.style.display = 'none'; ","srcFilePath":"src/pages/javascript/jQuery.md","id":"jQuery","url":"/javascript/jQuery.html"},"lodash":{"title":"Lodash","description":"","layout":"othersGuide","weight":1,"clayTaglib":"Vanilla or Metal.js","content":" How to migrate: Direct replacements lodash | replacement --- | --- _.bind | to native .bind. _.bindKey | there's no direct replacement. _.escape | there's no direct replacement. _.groupBy | there's no direct replacement. _.isEqual | there's no direct replacement. _.map | to native Array.map. _.reduce | to native Array.reduce. _.unescape | there's no direct replacement. _.sub | there's no direct replacement. _.without | there's no direct replacement. Code replacements _.debounce to metal-debounce. let debounce = metalDebounceSrcDebounce.default; debounce(fn, time); _.forEach to .forEach or for in [1,2,3].forEach((item) = { console.log(item); }); let obj = {a:1, b:2, c:3}; for(key in obj) { console.log(item); } _.isFunction to function isFunction(fn) { return (!!fn && (\"object\" == typeof fn || \"function\" == typeof fn)) && toString.call(fn) == '[object Function]' } ","srcFilePath":"src/pages/javascript/lodash.md","id":"lodash","url":"/javascript/lodash.html"}},"childIds":["lodash","jQuery"]}},"childIds":["javascript"]}}